extensions:
  docker_observer:
    endpoint: unix:///var/run/docker.sock

receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
  docker_stats:
    endpoint: unix:///var/run/docker.sock
    collection_interval: 30s
    timeout: 10s
    excluded_images:
      - "nginxproxy/docker-gen"
    metrics:
      container.uptime:
        enabled: true
      container.restarts:
        enabled: true
      container.network.io.usage.rx_errors:
        enabled: true
      container.network.io.usage.tx_errors:
        enabled: true
      container.network.io.usage.rx_packets:
        enabled: true
      container.network.io.usage.tx_packets:
        enabled: true
  filelog:
    include:
      - /var/lib/docker/containers/*/*.log
    include_file_name: false
    include_file_path: true
    operators:
    - type: json_parser
      if: body matches "^{.*}$"
      parse_to: attributes
      output: parse_container_name
    - id: recombine
      type: recombine
      combine_field: body
      is_first_entry: body matches "^\\d{4}-\\d{2}-\\d{2}T\\d{2}"
    - type: regex_parser
      id: parse_container_name
      regex: '(?P<container_name>.+)'
      parse_from: attributes.attrs.tag

  receiver_creator:
    watch_observers: [docker_observer]
    receivers:
      nginx:
        rule: type == "container" && name contains "nginx"
        config:
          endpoint: "http://nginx:10080/status"
          collection_interval: 10s
      postgresql:
        rule: type == "container" && name contains "db"
        config:
          endpoint: db:5432
          username: ${OTEL_USER}
          password: ${OTEL_PASS}
          databases:
            - chessu
          collection_interval: 10s
          tls:
            insecure: true
            insecure_skip_verify: true
processors:
  batch:
    send_batch_size: 1000
    timeout: 10s
  resourcedetection/env:
    detectors: [env]
    timeout: 2s
    override: false
  resourcedetection/system:
    detectors: ["system"]
    system:
      hostname_sources: ["dns", "os"]
  resourcedetection/docker:
    detectors: [env, docker]
    timeout: 2s
    override: false
exporters:
  splunk_hec/logs:
    token: "${LOGS_TOKEN}"
    endpoint: "https://splunk:8088"
    sourcetype: "chessu-logs"
    tls:
      insecure_skip_verify: true
  splunk_hec/metrics:
    token: "${METRICS_TOKEN}"
    endpoint: "https://splunk:8088"
    sourcetype: "chessu-metrics"
    tls:
      insecure_skip_verify: true
  splunk_hec/traces:
    token: "${TRACES_TOKEN}"
    endpoint: "https://splunk:8088"
    sourcetype: "chessu-traces"
    tls:
      insecure_skip_verify: true

service:
  extensions: [docker_observer]
  pipelines:
    metrics:
      receivers: [otlp, docker_stats, receiver_creator]
      processors: [resourcedetection/env, resourcedetection/system, resourcedetection/docker, batch]
      exporters: [splunk_hec/metrics]

    traces:
      receivers: [otlp, receiver_creator]
      processors: [resourcedetection/env, resourcedetection/system, resourcedetection/docker, batch]
      exporters: [splunk_hec/traces]

    logs:
      receivers: [otlp, filelog]
      processors: [resourcedetection/env, resourcedetection/system, resourcedetection/docker, batch]
      exporters: [splunk_hec/logs]